[{"C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\index.js":"1","C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\App.js":"2","C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\components\\Buttons.js":"3"},{"size":218,"mtime":1611008392950,"results":"4","hashOfConfig":"5"},{"size":209,"mtime":1611008486723,"results":"6","hashOfConfig":"5"},{"size":1170,"mtime":1611028457979,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"jmuj12",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\index.js",["18"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useState } from \"react\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n",["19","20"],"C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\App.js",["21"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Buttons from \"./components/Buttons.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Buttons />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\Luke\\Documents\\Coding\\react-test\\src\\components\\Buttons.js",["22","23"],"import { render } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Buttons() {\r\n\r\nconst [buttonValue, setButtonValue] = useState(0);\r\nconst [memory, setMemory] = useState(0);\r\nconst [result, setResults] = useState(0);\r\nconst [operands, setOperands] = useState(\"\");\r\n\r\n\r\n\r\nconst changeButtonValue = (e) => {\r\n    //if (buttonValue != 0)\r\n        setButtonValue(parseInt(e.target.value));\r\n    \r\n}\r\n\r\nconst changeOperands = (e) => {\r\n    setOperands(e.target.value);\r\n}\r\n\r\nconst calculate = () => {\r\n\r\n    if (operands === '+')\r\n        setMemory(memory + buttonValue);\r\n\r\n    else \r\n        setMemory(memory - buttonValue);\r\n        \r\n    return result;\r\n}\r\n\r\nconst output = () => {\r\n    setResults(memory);\r\n}\r\n\r\n\r\n\r\n  return (\r\n      <div>\r\n          <button value = '1' onClick = {changeButtonValue}>1</button>\r\n          <button value = '+' onClick = {changeOperands}>+</button> {/* addition */}\r\n          <button value = '-' onClick = {changeOperands}>-</button> {/* subtraction */}\r\n          <button onClick = {calculate}>=</button> {/* equals */}\r\n\r\n          <h1>{result}</h1>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Buttons;",{"ruleId":"24","severity":1,"message":"25","line":3,"column":10,"nodeType":"26","messageId":"27","endLine":3,"endColumn":18},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"24","severity":1,"message":"25","line":2,"column":10,"nodeType":"26","messageId":"27","endLine":2,"endColumn":18},{"ruleId":"24","severity":1,"message":"32","line":1,"column":10,"nodeType":"26","messageId":"27","endLine":1,"endColumn":16},{"ruleId":"24","severity":1,"message":"33","line":34,"column":7,"nodeType":"26","messageId":"27","endLine":34,"endColumn":13},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["34"],"no-negated-in-lhs",["35"],"'render' is defined but never used.","'output' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]